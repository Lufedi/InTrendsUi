{"version":3,"sources":["logo.svg","config/ApiSauce.js","services/JobService.js","containers/MainPage.js","services/TermService.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","instance","axios","create","baseURL","timeout","getJobs","termId","console","log","api","get","params","t","LINE_COLORS","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","MainPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","terms","termsMultiple","term","jobs","chartData","mappedTerms","selectedTerm","getTerms","bind","assertThisInitialized","handleChange","handleChangeMultiple","formatTooltip","updateJobList","res","status","data","reduce","prev","curr","id","setState","error","_context","t0","slice","map","job","value","total","time","moment","created_at","toDate","getTime","_context2","name","utc","format","event","target","defineProperty","_ref","selectedTerms","savedjobs","filter","added","length","newData","push","classes","props","_this$state2","react_default","a","createElement","FormControl_default","className","formControl","InputLabel_default","htmlFor","Select_default","multiple","onChange","input","Input_default","renderValue","selected","chips","Chip_default","key","label","chip","MenuItem_default","es6","height","dataKey","domain","tickFormatter","tick","type","i","line","stroke","fill","lineJointType","lineType","cursor","strokeDasharray","formatter","Component","withStyles","theme","root","display","flexWrap","margin","spacing","unit","minWidth","selectEmpty","marginTop","App","containers_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5e69f96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport axios from 'axios'\nconst instance = axios.create({\n    baseURL: 'https://in-trends.herokuapp.com',\n    timeout: 30000,\n  });\n\n\n\nexport default instance","\n\nimport api from '../config/ApiSauce'\n\n\n\nexport const getJobs = (termId) => {\n  console.log(termId);\n  \n  return api.get('/terms/records', {\n    params: {\n      t: termId\n    }\n  })\n}\n","\nimport React, { Component } from 'react'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport Chip from '@material-ui/core/Chip';\nimport Input from '@material-ui/core/Input';\n\n\nimport { withStyles } from '@material-ui/core'\nimport { getTerms } from '../services/TermService'\nimport { getJobs } from '../services/JobService'\nimport moment from 'moment'\nimport {\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Scatter,\n  ScatterChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts'\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing.unit * 2,\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: theme.spacing.unit / 4,\n  },\n});\n\nconst LINE_COLORS=[\n  '#f44336',\n  \"#8bc34a\",\n  '#e91e63',\n  '#9c27b0',\n  \"#4caf50\",\n\n  \"#795548\",\n  '#3f51b5',\n  \"#9e9e9e\",\n  \"#2196f3\",\n  \"#ffd600\",\n  \"#00bcd4\",\n  \"#009688\",\n  \n  \"#cddc39\",\n  \"#ff9800\",\n  \n  \n\n]\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nclass MainPage extends Component {\n  constructor() {\n    super()\n    this.state = {\n      terms: [],\n      termsMultiple: [],\n      term: '',\n      jobs: [],\n      chartData: [],\n      mappedTerms: {},\n      selectedTerm: null\n    }\n    this.getTerms = this.getTerms.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleChangeMultiple = this.handleChangeMultiple.bind(this)\n    this.formatTooltip = this.formatTooltip.bind(this)\n    this.updateJobList = this.updateJobList.bind(this)\n  }\n\n  async getTerms() {\n    try {\n      const res = await getTerms()\n      let terms = []\n      if (res.status == 200) {\n        terms = res.data\n      }\n      const mappedTerms = terms.reduce((prev, curr) => {\n        prev[curr.term] = curr.id\n        prev[curr.id] = curr.term\n        return prev\n      }, {})\n      this.setState({\n        terms,\n        mappedTerms\n      })\n    } catch (e) {\n      console.error(e)\n      throw e\n    }\n  }\n\n  async getJobs(termId) {\n    try {\n      const res = await getJobs(termId)\n      let jobs = null\n      if (res.status == 200) {\n        jobs = res.data\n      }\n      jobs = jobs.slice(-100)\n      const chartData = jobs.map(job => ({\n        value: job.total,\n        time: moment(job.created_at).toDate().getTime()\n      }))\n      return chartData\n    } catch (e) {\n      console.error(e)\n      throw e\n    }\n  }\n\n  formatTooltip(value, name) {\n    switch (name) {\n      case 'Time':\n        value = moment.utc(value).format('MMMM Do YYYY, h:mm:ss a')\n        break\n      case 'Value':\n        name = 'Opened Jobs'\n        break\n    }\n    return [value, name]\n  }\n\n  handleChange(event) {\n    console.log(event.target)\n    this.setState({ [event.target.name]: event.target.value });\n    this.getJobs(event.target.value)\n  }\n  handleChangeMultiple({ target: { value } }) {\n    this.updateJobList(value)\n    this.setState({ termsMultiple: value });\n  }\n  async updateJobList(terms) {\n    const { jobs, mappedTerms } = this.state\n    const selectedTerms = terms.reduce((prev, curr) => {\n      prev[curr] = true\n      return prev\n    }, {})\n    const savedjobs = jobs.filter(job => selectedTerms[job.term])\n    const added = terms.filter(term => jobs.filter(job => job.term === term).length <= 0)\n    for (var term in added) {\n      const newData = await this.getJobs(mappedTerms[added[term]])\n      savedjobs.push({\n        term: added[term],\n        jobs: newData\n      });\n    }\n    this.setState({\n      jobs: savedjobs\n    })\n    console.log('savedJobs', savedjobs)\n  }\n  componentDidMount() {\n    this.getTerms()\n  }\n  render() {\n    const {\n      classes\n    } = this.props\n\n    const {\n      terms,\n      termsMultiple,\n      jobs\n    } = this.state\n    return (\n      <div>\n\n        <FormControl className={classes.formControl}>\n          <InputLabel htmlFor=\"select-multiple-chip\">Term</InputLabel>\n          <Select\n            multiple\n            value={termsMultiple}\n            onChange={this.handleChangeMultiple}\n            input={<Input id=\"select-multiple-chip\" />}\n            renderValue={selected => (\n              <div className={classes.chips}>\n                {selected.map(value => (\n                  <Chip key={value} label={value} className={classes.chip} />\n                ))}\n              </div>\n            )}\n            MenuProps={MenuProps}\n          >\n            {terms.map(term => (\n              <MenuItem key={term.term} value={term.term}>\n                {term.term}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n\n\n        <ResponsiveContainer width='95%' height={500} >\n          <ScatterChart>\n            <XAxis\n              dataKey='time'\n              domain={['auto', 'auto']}\n              name='Time'\n              tickFormatter={(tick) => moment(tick).format()}\n              type='number'\n            />\n            <YAxis dataKey='value' name='Value' />\n            <Legend />\n            {\n              jobs.map((term, i) => (\n                <Scatter\n                  data={term.jobs}\n                  line={{ stroke: '#eee' }}\n                  fill={LINE_COLORS[i]}\n                  lineJointType='monotoneX'\n                  lineType='joint'\n                  name={term.term}\n                />\n              ))\n            }\n\n            <Tooltip cursor={{ strokeDasharray: '3 3' }} formatter={this.formatTooltip} />\n\n          </ScatterChart>\n        </ResponsiveContainer>\n      </div>\n\n    )\n\n  }\n}\n\nexport default withStyles(styles)(MainPage)","\n\nimport api from '../config/ApiSauce'\n\n\n\nexport const getTerms = () => {\n  return api.get('/terms')\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPAge from './containers/MainPage'\n\nclass App extends Component {\n  render() {\n    return (\n      <MainPAge />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}